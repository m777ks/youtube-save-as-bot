
import logging
import os

from aiogram import Router, types, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import FSInputFile, CallbackQuery
from celery_app.tasks import download_and_upload_video, parse_youtube_formats
from redis_client.client_redis import redis_client
from utils.check_limit import can_download
from utils.trottle import del_throttle, check_throttle
from db.ORM import DataBase
from config_data.config import ConfigEnv, load_config

config: ConfigEnv = load_config()

router = Router()

logging.basicConfig(level=logging.INFO)

DOWNLOAD_DIR = "downloads"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)


@router.message(CommandStart())
async def start_cmd(message: types.Message):
    if await check_throttle(message.from_user.id, message.text):
        return
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube, –∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.")

    user_name = message.from_user.username or "NO_USERNAME"
    user = await DataBase.insert_user(message.from_user.id, user_name)

SUPPORT_TEXT = (
    "‚úâÔ∏è <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>\n\n"
    "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî "
    "–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É: <a href='https://t.me/Raymond_send'>@Raymond_send</a>.\n\n"
    "–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ!\n"
    "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –±–æ—Ç–æ–º üôå"
)

@router.message(Command(commands="supports"))
async def supports_handler(message: types.Message):
    if await check_throttle(message.from_user.id, message.text):
        return
    await message.answer(SUPPORT_TEXT, parse_mode="HTML")


@router.message(Command("reset_redis"))
async def reset_redis_handler(message: types.Message):
    if message.from_user.id not in config.tg_bot.admin_ids:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ ‚Äî –±–µ—Ä–µ–º —Å–≤–æ–π
    args = message.text.split()
    if len(args) >= 2 and args[1].isdigit():
        target_user_id = int(args[1])
    else:
        target_user_id = message.from_user.id

    patterns = [
        f"throttle:{target_user_id}:*",
        f"downloads:{target_user_id}",
        f"s3||result||{target_user_id}||*",
        f"yt:{target_user_id}:*",
    ]

    deleted = 0
    for pattern in patterns:
        keys = await redis_client.keys(pattern)
        if keys:
            await redis_client.delete(*keys)
            deleted += len(keys)

    await message.reply(
        f"–°–±—Ä–æ—à–µ–Ω–æ {deleted} –∫–ª—é—á–µ–π Redis –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}."
    )

@router.message(lambda m: "youtu" in m.text)
async def on_youtube_link(message: types.Message):
    try:
        if await check_throttle(message.from_user.id, 'send', 600):
            await message.answer('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...')
            return
        url = message.text.strip()
        user_id = message.from_user.id

        # –ö–∏–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Celery
        parse_youtube_formats.delay(user_id, url)
        await message.reply("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É... –¢—É—Ç –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∞–º–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!")

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {e}")
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **–ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ**, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "`https://youtu.be/VIDEO_ID` –∏–ª–∏ `https://www.youtube.com/watch?v=VIDEO_ID`\n\n"
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç—ã, –∫–∞–Ω–∞–ª—ã –∏–ª–∏ —Å–±–æ—Ä–Ω–∏–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
        )



@router.callback_query(F.data.startswith("dl|"))
async def on_download_click(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id


    try:
        if not await can_download(user_id):
            await callback.message.answer(
                "‚ùóÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî @Raymond_send üòä"
            )

            return
        if await check_throttle(callback.from_user.id, 'dl', 600):
            await callback.message.answer("‚è≥ –£–∂–µ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return


        _, format_id = callback.data.split("|")
        redis_key = f"yt:{callback.from_user.id}:{format_id}"
        url_bytes = await redis_client.get(redis_key)
        url = url_bytes.decode() if url_bytes else None



        if not url:
            await callback.message.answer("‚ùå –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        # print(url)
        task = download_and_upload_video.delay(url, callback.data, user_id)

        await callback.message.answer("üì• –°–∫–∞—á–∏–≤–∞—é...\n\n–Ø –ø—Ä–∏—à–ª—é —Å—Å—ã–ª–∫—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ.")

        await DataBase.increment_sent_links(user_id)


    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

