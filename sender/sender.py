import asyncio
import json
import logging
import time

from aiogram import F, Bot, Router, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.media_group import MediaGroupBuilder
from config_data.config import ConfigEnv, load_config
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from db.ORM import SenderORM
from middlewares.album_middleware import AlbumMiddleware
from aiogram.fsm.storage.redis import Redis

logger = logging.getLogger(__name__)
config: ConfigEnv = load_config()

redis = Redis(host=config.redis.host, port=config.redis.port, password=config.redis.password)
# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = config.tg_bot.admin_ids

router = Router()
router.message.middleware(AlbumMiddleware(0.5, ADMIN_IDS))


class FSMFillForm(StatesGroup):
    SEND_type = State()
    SEND_ids = State()
    SEND_text = State()
    SEND_process = State()


@router.message(Command(commands="start_mailing"), StateFilter(FSMFillForm.SEND_process))
async def start_mailing_process(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:{message.from_user.username}")
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")


# –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(Command(commands="start_mailing"))
async def start_mailing(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        logger.warning(
            f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:{message.from_user.username}")
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    logger.info(f"–ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}:{message.from_user.username}")

    instruction = (
        "<b>–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –º–∞—Å—Ç–µ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏.</b>\n\n"
        "1Ô∏è‚É£ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b>\n"
        " - <b>¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–º¬ª</b> ‚Äî –≤—Ä—É—á–Ω—É—é —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        " - <b>¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º¬ª</b> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–π–¥–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        " - <b>¬´–ò—Å–∫–ª—é—á–∏—Ç—å ID¬ª</b> ‚Äî —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ <u>–Ω–µ</u> –ø–æ–ª—É—á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç.\n\n"
        "2Ô∏è‚É£ <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–µ–¥–∏–∞</b>\n"
        " ‚Äî –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É.\n\n"
        "3Ô∏è‚É£ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É</b>\n"
        " ‚Äî –ü–µ—Ä–µ–¥ —Ä–∞—Å—Å—ã–ª–∫–æ–π –±—É–¥–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n\n"
        "4Ô∏è‚É£ <b>–û—Ç–º–µ–Ω–∞</b>\n"
        " ‚Äî –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/cancel_mailing</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.\n\n"
        "5Ô∏è‚É£ <b>–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n"
        " ‚Äî –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/mailing_status</code>.\n\n"
        "<i>–°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –±–æ—Ç–∞ ‚Äî –∫–∞–∂–¥—ã–π —à–∞–≥ –±—É–¥–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.</i>"
    )

    # –ö–Ω–æ–ø–∫–∏
    button_1 = InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–º", callback_data="send_selected")
    button_2 = InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º", callback_data="send_all")
    button_3 = InlineKeyboardButton(text="–ò—Å–∫–ª—é—á–∏—Ç—å ID", callback_data="exclude_ids")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_1], [button_2], [button_3]])

    await message.reply(instruction, reply_markup=keyboard, parse_mode="HTML")

@router.message(Command(commands="mailing_status"))
async def mailing_status(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    redis_key = "mailing_progress"
    try:
        remaining = await redis.scard(redis_key)
        total = int(await redis.get("mailing_total") or 0)
        sent = total - remaining
        percent = (sent / total) * 100 if total else 0

        await message.reply(
            f"üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}/{total}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {percent:.1f}%"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏.")

@router.message(Command(commands="cancel_mailing"))
async def cancel_mailing(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    redis_key = "mailing_progress"

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ –∏, –µ—Å–ª–∏ –µ—Å—Ç—å, –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await redis.delete(redis_key)
        await redis.delete("mailing_total")
        await state.clear()
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}:{message.from_user.username}")
        await message.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–æ–≥—Ä–µ—Å—Å —É–¥–∞–ª—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")


@router.message(Command(commands="reset"))
async def reset_state(message: types.Message, state: FSMContext):
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}:{message.from_user.username}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(lambda c: c.data in ["send_selected", "send_all", "exclude_ids"])
async def select_recipients(callback: types.CallbackQuery, state: FSMContext):
    logger.info(
        f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ '{callback.data}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}:{callback.from_user.username}")
    await state.set_state(FSMFillForm.SEND_type)
    await state.update_data(type=callback.data)

    if callback.data == "send_selected":
        await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        await state.set_state(FSMFillForm.SEND_ids)
    elif callback.data == "exclude_ids":
        await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state(FSMFillForm.SEND_ids)
    else:
        await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state(FSMFillForm.SEND_text)
        await state.update_data(type=callback.data)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID (–¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö)
@router.message(StateFilter(FSMFillForm.SEND_ids), F.text)
async def process_ids(message: types.Message, state: FSMContext):
    await state.set_state(FSMFillForm.SEND_ids)
    ids = [int(user_id.strip()) for user_id in message.text.split(",") if user_id.strip().isdigit()]
    await state.update_data(ids=ids)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(FSMFillForm.SEND_text)


@router.message(StateFilter(FSMFillForm.SEND_text), F.media_group_id)
async def accept_photos(message: types.Message, bot: Bot, state: FSMContext, album: list = None):
    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –æ—Ç {message.from_user.id}:{message.from_user.username}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: {len(album)}")

    try:
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö
        media_messages = []

        for msg in album:
            media_info = {
                'caption': msg.caption,
                'media_group_id': msg.media_group_id
            }

            if msg.photo:
                media_info['type'] = 'photo'
                media_info['file_id'] = msg.photo[-1].file_id
            elif msg.video:
                media_info['type'] = 'video'
                media_info['file_id'] = msg.video.file_id
            elif msg.document:
                media_info['type'] = 'document'
                media_info['file_id'] = msg.document.file_id

            media_messages.append(media_info)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(media_messages=media_messages)

        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_group = MediaGroupBuilder(caption=media_messages[0].get('caption', None))

        for media in media_messages:
            preview_group.add(
                type=media['type'],
                media=media['file_id'],
                caption=media.get('caption')
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        await message.answer_media_group(media=preview_group.build())

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        btn_yes = InlineKeyboardButton(text="–î–∞", callback_data="SEND_yes")
        btn_no = InlineKeyboardButton(text="–ù–µ—Ç", callback_data="SEND_no")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[btn_yes], [btn_no]])

        await message.answer(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É?\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=keyboard
        )

        logger.info(f'–ü—Ä–∏—à–ª–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}:{message.from_user.username}')
        logger.debug(f"–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(StateFilter(FSMFillForm.SEND_text))
async def process_message(message: types.Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç {message.from_user.id}:{message.from_user.username}")

    try:
        await state.set_state(FSMFillForm.SEND_text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        message_data = {
            'text': message.text,
            'photo': message.photo[-1].file_id if message.photo else None,
            'video': message.video.file_id if message.video else None,
            'document': message.document.file_id if message.document else None,
            'audio': message.audio.file_id if message.audio else None,
            'voice': message.voice.file_id if message.voice else None,
            'caption': message.caption,
        }

        await state.update_data(message_data=message_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n\n"
        if message.photo:
            confirm_text += "–§–æ—Ç–æ"
            if message.caption:
                confirm_text += f" —Å –ø–æ–¥–ø–∏—Å—å—é: {message.caption}"
        elif message.video:
            confirm_text += "–í–∏–¥–µ–æ"
            if message.caption:
                confirm_text += f" —Å –ø–æ–¥–ø–∏—Å—å—é: {message.caption}"
        elif message.document:
            confirm_text += "–î–æ–∫—É–º–µ–Ω—Ç"
            if message.caption:
                confirm_text += f" —Å –ø–æ–¥–ø–∏—Å—å—é: {message.caption}"
        elif message.text:
            confirm_text += f"–¢–µ–∫—Å—Ç: {message.text}"

        confirm_text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–ù–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        btn_yes = InlineKeyboardButton(text="–î–∞", callback_data="SEND_yes")
        btn_no = InlineKeyboardButton(text="–ù–µ—Ç", callback_data="SEND_no")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[btn_yes], [btn_no]])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

        if message.photo:
            await message.reply_photo(
                photo=message.photo[-1].file_id,
                caption=message.caption
            )
        elif message.video:
            await message.reply_video(
                video=message.video.file_id,
                caption=message.caption
            )
        elif message.document:
            await message.reply_document(
                document=message.document.file_id,
                caption=message.caption
            )
        elif message.audio:
            await message.reply_audio(
                audio=message.audio.file_id,
                caption=message.caption
            )
        elif message.voice:
            await message.reply_voice(
                voice=message.voice.file_id,
                caption=message.caption
            )
        elif message.text:
            await message.reply(message.text)

        await message.reply(confirm_text, reply_markup=keyboard)
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(lambda c: c.data in ["SEND_yes", "SEND_no"])
async def confirm_mailing(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    await callback.message.delete()
    if callback.data == "SEND_no":
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}:{callback.from_user.username}")
        await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return

    await state.set_state(FSMFillForm.SEND_process)
    logger.info(f"–ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}:{callback.from_user.username}")
    mailing_data = await state.get_data()

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    recipient_ids = []
    if mailing_data["type"] == "send_all":
        recipient_ids = get_all_user_ids()
        logger.info(f"–¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipient_ids)}")
    elif mailing_data["type"] == "send_selected":
        recipient_ids = mailing_data["ids"]
        logger.info(f"–¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipient_ids)}")
    elif mailing_data["type"] == "exclude_ids":
        all_ids = get_all_user_ids()
        recipient_ids = [user_id for user_id in all_ids if user_id not in mailing_data["ids"]]
        logger.info(f"–¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: –≤—Å–µ–º –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipient_ids)}")

    await callback.message.answer(
        f"–ù–∞—á–∞—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}:{callback.from_user.username}\n–¢–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏: –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipient_ids)}")


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ Redis
    redis_key = "mailing_progress"
    await redis.sadd(redis_key, *recipient_ids)
    await redis.set("mailing_total", len(recipient_ids))

    success_count = 0
    error_count = 0
    start_time = time.time()

    for user_id in recipient_ids:
        if await redis.sismember(redis_key, user_id):
            try:
                if 'media_messages' in mailing_data:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MediaGroupBuilder –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
                    media_group = MediaGroupBuilder(caption=mailing_data['media_messages'][0].get('caption'))
                    for media in mailing_data['media_messages']:
                        media_group.add(
                            type=media['type'],
                            media=media['file_id']
                        )
                    await bot.send_media_group(user_id, media=media_group.build())
                elif mailing_data.get('photo'):
                    await bot.send_photo(user_id, mailing_data['photo'], caption=mailing_data.get('caption'))
                elif mailing_data.get('video'):
                    await bot.send_video(user_id, mailing_data['video'], caption=mailing_data.get('caption'))
                elif mailing_data.get('document'):
                    await bot.send_document(user_id, mailing_data['document'], caption=mailing_data.get('caption'))
                elif mailing_data.get('audio'):
                    await bot.send_audio(user_id, mailing_data['audio'], caption=mailing_data.get('caption'))
                elif mailing_data.get('voice'):
                    await bot.send_voice(user_id, mailing_data['voice'], caption=mailing_data.get('caption'))
                elif mailing_data.get('text'):
                    await bot.send_message(user_id, mailing_data['text'])
                success_count += 1
                logger.debug(f"–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await redis.srem(redis_key, user_id)
                await asyncio.sleep(0.5)
            except Exception as e:
                error_count += 1
                await redis.srem(redis_key, user_id)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                # –ü—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                error_str = str(e)
                if "bot was blocked by the user" in error_str:
                    await SenderORM.update_user_status(user_id, "blocked")
                elif "user is deactivated" in error_str:
                    await SenderORM.update_user_status(user_id, "deleted")

    end_time = time.time()
    duration = end_time - start_time
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count}, –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫.")
    await callback.message.answer(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"–û—à–∏–±–æ–∫: {error_count}\n"
        f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫."
    )
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–º–µ—Ä)
async def get_all_user_ids():
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    return await SenderORM.get_all_user_ids_active()
