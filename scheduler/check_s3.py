import json

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from db.ORM import DataBase
from redis_client.client_redis import redis_client
from utils.check_limit import incr_download
ERROR_MSG = ("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ.\n\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
             "https://youtu.be/VIDEO_ID\n–∏–ª–∏\nhttps://www.youtube.com/watch?v=VIDEO_ID\n\n"
             "‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç—ã, –∫–∞–Ω–∞–ª—ã –∏–ª–∏ —Å–±–æ—Ä–Ω–∏–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.")

async def check_s3_results(bot: Bot):
    keys = await redis_client.keys("s3||result||*")
    for key in keys:
        user_id = int(key.decode().split("||")[-2])

        try:
            print(f"–ü–æ–ª—É—á–µ–Ω –∫–µ–π: {key}")
            print(f'USER_ID: {user_id}')
            url_orig = key.decode().split("||")[-1]
            url = await redis_client.get(key)
            url = url.decode() if url else None

            if url == "error":
                await bot.send_message(user_id, ERROR_MSG)
            elif url:
                button = InlineKeyboardButton(text="üîó –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ", url=url)
                markup = InlineKeyboardMarkup(inline_keyboard=[[button]])
                await bot.send_message(user_id, f"‚úÖ –ì–æ—Ç–æ–≤–æ! <a href='{url_orig}'>–¢–≤–æ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é.</a>\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=markup, parse_mode='HTML')
                await incr_download(user_id, url_orig)
                await DataBase.log_download(user_id, url_orig)

            await redis_client.delete(key)  # —É–¥–∞–ª—è–µ–º –∫–ª—é—á, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–æ—Å—å

        except Exception as e:
            await redis_client.delete(key)
            print(f'ERROR: send user: {key}, error: {e}')

            await bot.send_message(user_id, ERROR_MSG)


async def check_formats_ready(bot: Bot):
    # –ù–∞–π—Ç–∏ –≤—Å–µ –∫–ª—é—á–∏ yt_formats:* (–∏–ª–∏ –ø–æ user_id)
    keys = await redis_client.keys("yt_formats:*")
    for key in keys:
        key_str = key.decode() if isinstance(key, bytes) else key
        parts = key_str.split(":")
        user_id = int(parts[1])
        try:

            url = ":".join(parts[2:])
            value = await redis_client.get(key)
            value = value.decode() if value else None

            if not value:
                continue
            if value == "error":
                await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ.")
                await redis_client.delete(key)
                continue

            formats = json.loads(value)
            if not formats:
                await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã.")
                await redis_client.delete(key)
                continue

            buttons = []
            for f in formats[:10]:
                fid = f["format_id"]
                filesize_mb = round(f["filesize"] / 1024 / 1024, 1)
                label = f"{f.get('format_note') or ''} {f['ext']} - {filesize_mb}MB"
                redis_key = f"yt:{user_id}:{fid}"
                await redis_client.setex(redis_key, 3600, url)
                buttons.append([InlineKeyboardButton(text=label.strip(), callback_data=f"dl|{fid}")])
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–æ:", reply_markup=keyboard)

            await redis_client.delete(key)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤: {e}")
            await redis_client.delete(key)
            await bot.send_message(user_id, ERROR_MSG)